diff -ru a/_62-start-vm-helper.py b/_62-start-vm-helper.py
--- a/_62-start-vm-helper.py	2015-09-10 22:44:22.000000000 +0200
+++ b/_62-start-vm-helper.py	2016-02-07 17:16:00.945525196 +0100
@@ -28,9 +28,11 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-import random
+# This script is based on dppd-PROX-v021/helper-scripts/start_vm.py
+
 from os import system
-from os import popen
+from os import fork, _exit
+from subprocess import check_output
 import socket
 from time import sleep
 import json
@@ -51,9 +53,7 @@
 # QMP and affinitize all cores within the VM to match cores on the
 # host.
 
-cores = []
-for i in range(0,10):
-    cores.append([i, i + 20]);
+execfile("./vm-cores.py")
 
 def build_mask(cores):
     ret = 0;
@@ -72,34 +72,48 @@
 smp_str += ",sockets=1"
 smp_str += ",threads=" + str(n_threads)
 
+try:
+    qmp_sock = check_output(["mktemp", "--tmpdir", "qmp-sock-XXXX"]).strip()
+except:
+    qmp_sock = "/tmp/qmp-sock"
+
 qemu_cmdline = ""
-qemu_cmdline += "taskset " + mask + " qemu-system-x86_64 -smp " + smp_str + " \\\n"
-qemu_cmdline += " -qmp unix:/tmp/qmp-sock,server,nowait \\\n"
+qemu_cmdline += "taskset " + mask + " qemu-system-x86_64 -smp " + smp_str
+qemu_cmdline += " -qmp unix:" + qmp_sock + ",server,nowait"
+qemu_cmdline += " -daemonize"
 
 for a in sys.argv[1:]:
     qemu_cmdline += " " + a
 
-if (system("pgrep qemu") == 0):
-    print "Qemu already running"
-    exit(-1);
-ret = system(qemu_cmdline)
-if (ret != 0):
-    print "Failed to run qemu. Command line used was: "
-    print qemu_cmdline
-    exit(-1);
-print "Qemu started"
+try:
+    pid = fork()
+except OSError, e:
+    sys.exit("Failed to fork: " + e.strerror)
+
+if (pid != 0):
+    # In the parent process
+    ret = system(qemu_cmdline)
+    if (ret != 0):
+        sys.exit("Failed to run QEMU: exit status " + str(ret) + ". Command line was:\n" + qemu_cmdline)
+    # Parent process done
+    sys.exit(0)
 
+# In the child process: use _exit to terminate
 retry = 0
 s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
 while (retry < 10):
+    sleep(1);
     try:
-        s.connect("/tmp/qmp-sock")
+        s.connect(qmp_sock)
+        print "Connected to QMP"
         break;
     except:
-        print "Failed to connect, retry (" + str(retry + 1) + ")"
-    sleep(1);
+        pass
     retry = retry + 1
-print "Connected to qmp"
+    print "Failed to connect to QMP, attempt " + str(retry)
+if (retry >= 10):
+    print "Failed to connect to QMP"
+    _exit(1)
 
 # skip info about protocol
 dat = s.recv(100000)
@@ -112,9 +126,9 @@
 a = json.loads(dat)["return"];
 
 if (len(a) != n_cores*n_threads):
-    print "Mismatch between number of vCPU reported by qmp and configuration"
-
-print "VM cpu info seems correct (" + str(len(a)) + " Cores)"
+    print "Configuration mismatch: " + str(len(a)) + " vCPU reported by QMP, instead of expected " + str(n_cores*n_threads)
+    _exit(1)
+print "QMP reported " + str(len(a)) + " vCPU, as expected"
 
 if (n_threads == 1):
     idx = 0;
@@ -135,6 +149,8 @@
             idx = idx + 1;
             prev = 0
 else:
-    print "More than 2 threads per core (not implemented)"
+    print "Not implemented yet: more than 2 threads per core"
+    _exit(1)
 
-print "Core pinning complete"
+print "Core affinitization completed"
+_exit(0)
